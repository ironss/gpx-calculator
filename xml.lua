#! /usr/bin/lua

local M = {}

local function parseargs(s)
  local arg = {}
  string.gsub(s, "([%w:]+)=([\"'])(.-)%2", function (w, _, a)
    arg[w] = a
  end)
  return arg
end
    
local TAG = 0


local function collect(s)
  local stack = {}
  local top = {}
  table.insert(stack, top)
  local ni,c,tag,xarg, empty
  local i, j = 1, 1
  while true do
    ni,j,c,tag,xarg, empty = string.find(s, "%s*<(%/?)([%w:]+)(.-)(%/?)>%s*", i)
    if not ni then break end
    local text = string.sub(s, i, ni-1)
    if not string.find(text, "^%s*$") then
      table.insert(top, text)
    end
    if empty == "/" then  -- empty element tag
      table.insert(top, {[TAG]=tag})
      xargs = parseargs(xarg)
      for k, v in pairs(xargs) do
         top[k] = v
      end
    elseif c == "" then   -- start tag
      top = {[TAG]=tag}
      xargs = parseargs(xarg)
      for k, v in pairs(xargs) do
         top[k] = v
      end
      table.insert(stack, top)   -- new level
    else  -- end tag
      local toclose = table.remove(stack)  -- remove top
      top = stack[#stack]
      if #stack < 1 then
        error("nothing to close with "..tag)
      end
      if toclose[TAG] ~= tag then
        error("trying to close "..toclose[TAG].." with "..tag)
      end
      table.insert(top, toclose)
    end
    i = j+1
  end
  local text = string.sub(s, i)
  if not string.find(text, "^%s*$") then
    table.insert(stack[#stack], text)
  end
  if #stack > 1 then
    error("unclosed "..stack[#stack][TAG])
  end
  return stack[1]
end


local function load(filename)
   local f = io.open(filename)
   local xdata = f:read('*all')
   print(xdata)
   local t = collect(xdata)
   return t
end


local function new(arg)
  if type(arg)=="table" then 
	return arg
  end
  local var={}
  if type(arg)=="string" then var[TAG]=arg end
  return var
end

local function append(var,tag)
  if type(var)~="table" then return end
  if type(tag) == 'string' then
    var[#var+1] = tag
    return     
  end
  local newVar = new(tag)
  var[#var+1] = newVar
  return newVar
end


local function encode(s)
   return s
end


local function str(var,indent,tagValue)
  if type(var)=="nil" then return end
  local indent = indent or 0
  local indentStr=""
  for i = 1,indent do indentStr=indentStr.."  " end
  local tableStr=""
  
  if type(var)=="table" then
    local tag = var[0] or tagValue or type(var)
    local s = indentStr.."<"..tag
    for k,v in pairs(var) do -- attributes 
      if type(k)=="string" then
        if type(v)=="table" and k~="_M" then --  otherwise recursiveness imminent
          tableStr = tableStr..str(v,indent+1,k)
        else
          s = s.." "..k.."=\""..encode(tostring(v)).."\""
        end
      end
    end
    if #var==0 and #tableStr==0 then
      s = s.." />\n"
    elseif #var==1 and type(var[1])~="table" and #tableStr==0 then -- single element
      s = s..">"..encode(tostring(var[1])).."</"..tag..">\n"
    else
      s = s..">\n"
      for k,v in ipairs(var) do -- elements
        if type(v)=="string" then
          s = s..indentStr.."  "..encode(v).." \n"
        else
          s = s..str(v,indent+1)
        end
      end
      s=s..tableStr..indentStr.."</"..tag..">\n"
    end
    return s
  else
    local tag = type(var)
    return indentStr.."<"..tag.."> "..encode(tostring(var)).." </"..tag..">\n"
  end
end


local function save(data, filename)
  if not data then return end
  if not filename or #filename==0 then return end
  local file = io.open(filename,"w")
  file:write("<?xml version=\"1.0\"?>\n<!-- file \"",filename, "\", generated by LuaXML -->\n\n")
  file:write(str(data))
  file:close(file)
end

local function find(var, tag, attributeKey,attributeValue)
  -- check input:
  if type(var)~="table" then return end
  if type(tag)=="string" and #tag==0 then tag=nil end
  if type(attributeKey)~="string" or #attributeKey==0 then attributeKey=nil end
  if type(attributeValue)=="string" and #attributeValue==0 then attributeValue=nil end
  -- compare this table:
  if tag~=nil then
    if var[0]==tag and ( attributeValue == nil or var[attributeKey]==attributeValue ) then
      setmetatable(var,{__index=xml, __tostring=xml.str})
      return var
    end
  else
    if attributeValue == nil or var[attributeKey]==attributeValue then
      setmetatable(var,{__index=xml, __tostring=xml.str})
      return var
    end
  end
  -- recursively parse subtags:
  for k,v in ipairs(var) do
    if type(v)=="table" then
      local ret = find(v, tag, attributeKey,attributeValue)
      if ret ~= nil then return ret end
    end
  end
end


local function nodes(t, tag)
   local i = 0
   local f = function()
      local n
      repeat
         i = i + 1
         n = t[i]
      until (n == nil or find(n, tag) ~= nil)
      
      return n
   end
   
   return f
end

M.tag = TAG
M.load = load
M.parse = collect
M.find = find
M.nodes = nodes
M.new = new
M.append = append
M.save = save
M.tostring = str

return M

